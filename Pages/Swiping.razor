@page "/swiping"
@using Microsoft.VisualBasic
@using System.Xml.Serialization
@using BlazorAnimate
@inject HttpClient Http
@using System.Text.Json


<Socket @ref="mySocket" ShowList="dataSet"></Socket>

<h2>Selected trend: @selectedData</h2>
<Button Type="primary" @onclick="@(() => LoadData("topanime", "Anime"))">Anime</Button>
<Button Type="primary" @onclick="@(() => LoadData("topmovie", "Movies"))">Movies</Button>


<Button OnClick="ShowAnswers">Show Answers</Button>
<Button OnClick="SendAnswers">Send Answers</Button>

<p class="alert alert-info">@message</p>
@if (dataSet == null)
{
    <Card Loading="true" Style="width: 300px; margin-top: 16px">
        <CardMeta Avatar="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"
                  Title="Card title"
                  Description="This is the description" />
    </Card>
}
else
{
    @foreach (var show in dataSet)
    {
        <div class="card" style="width: 18rem; margin: 2em" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd" @onkeypress:preventDefault="true">
            <img class="card-img-top" src="@show.Image_url" alt="Card image cap">

            <div class="card-body">
                <h5 class="card-title">@show.Title</h5>
                <p class="card-text">@show.Description</p>
                <Button OnClick="ChooseLeft">Yes</Button>
                <Button OnClick="ChooseRight">No</Button>
            </div>
        </div>
    }
}


@code {


    private Socket mySocket;

    private string selectedData = "";
    private bool animeCheck;
    private bool movieCheck;

    private List<string> myAnswers = new List<string>();

    private List<ShowDTO> dataSet;

    private readonly string baseApiUri = "https://localhost:5021";

    public async Task LoadData(string dataURL, string _selectedData)
    {
        selectedData = _selectedData;
        dataSet = await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/{dataURL}");
    }

    public async Task LoadSelectedData()
    {
        Console.WriteLine("Enter");
        if (animeCheck)
        {
            Console.WriteLine("Anime Check");
            dataSet.AddRange(await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/topanime"));
        }
        if (movieCheck)
        {
            Console.WriteLine("MovieCheck");
            dataSet.AddRange(await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/topmovie"));
        }
    }

    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    string message = "touch to begin";

    void HandleTouchStart(TouchEventArgs t)
    {
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
    }

    void HandleTouchEnd(TouchEventArgs t)
    {
        const double swipeThreshold = 0.8;
        try
        {
            if (startPoint.ReferencePoint == null)
            {
                return;
            }

            var endReferencePoint = t.ChangedTouches[0];

            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);


            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (velocityX >= swipeThreshold)
            {
                if (diffX < 0)
                { ChooseRight(); }
                else { ChooseLeft(); }
            }
        }

        catch (Exception e)
        {
            message = e.Message;
        }
    }

    void ChooseLeft()
    {
        myAnswers.Add("yes");
    }

    void ChooseRight()
    {
        myAnswers.Add("no");
    }

    void ShowAnswers()
    {
        message = JsonSerializer.Serialize(myAnswers);
    }

    async Task SendAnswers()
    {

        await mySocket.SendAnswers(myAnswers);
    }

}
