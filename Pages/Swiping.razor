@page "/uxswipe"
@using Microsoft.VisualBasic
@using System.Xml.Serialization
@using BlazorAnimate
@inject HttpClient Http
@using System.Text.Json
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div @onmouseup="HandleMouseUp" @ontouchstart=HandleTouchStart @onkeypress:preventDefault=true @ontouchmove="HandleTouchMove"
     @ontouchend=HandleTouchEnd @onmousedown=HandleMouseDown @onmousemove=HandleMouseMove>

    <p class="alert alert-info">@message</p>
    <p class="alert alert-info">@pressedDown</p>


    @for(int i = 0; i < collection.Count;i++)
    {
        if (i == 0)
        {
            <div style="display:flex;justify-content:center;">
                <div class="card" style="width: 18rem; margin: 2em; transform: translateX(@mvmt) rotate(@rotation);transition: @mvmtReset; cursor: @cursorGrab;">

                    <img class="card-img-top" src="https://via.placeholder.com/350x150" alt="Card image cap">


                    <div class="card-body">
                        <h5 class="card-title">@collection[0]</h5>
                        <p class="card-text">Placeholder Description,Placeholder Description, Placeholder Description, Placeholder Description</p>
                        <Button @onclick="Delete">Yes</Button>
                        <Button>No</Button>
                    </div>
                </div>
            </div>
        }
    }

    @*    @for (int i = 0; i < 3; i++)
        {

            <div style="display:flex;justify-content:center;">
                <div class="card" style="width: 18rem; margin: 2em; transform: translateX(@mvmt) rotate(@rotation);transition: @mvmtReset; cursor: @cursorGrab;">

                    <img class="card-img-top" src="https://via.placeholder.com/350x150" alt="Card image cap">


                    <div class="card-body">
                        <h5 class="card-title">Placeholder Title</h5>
                        <p class="card-text">Placeholder Description,Placeholder Description, Placeholder Description, Placeholder Description</p>
                        <Button>Yes</Button>
                        <Button>No</Button>
                    </div>
                </div>
            </div>
        }*@

</div>


@code{
    List<string> collection = new List<string>(){"One","Two", "Three" };

    void Delete()
    {
        collection.RemoveAt(0);
        StateHasChanged();
    }

    private string cursorGrab;
    ((double, double) tupleMouse, DateTime StartTime) mousePoint;
    bool pressedDown;

    void HandleMouseDown(MouseEventArgs m)
    {
        cursorGrab = "-webkit-grabbing;";
        pressedDown = true;
        (double, double) pos = (m.ClientX, m.ClientY);
        mousePoint.StartTime = DateTime.Now;
        mousePoint.tupleMouse = pos;
    }

    void HandleMouseMove(MouseEventArgs m)
    {
        if (pressedDown == true)
        {
            mvmtReset = "";
            double difference = m.ClientX - mousePoint.tupleMouse.Item1;
            mvmt = difference + "px";
            rotation = (difference / 10) + "deg";
        }
    }

    void HandleMouseUp(MouseEventArgs m)
    {
        pressedDown = false;
        cursorGrab = "";
        mvmt = "";
        mvmtReset = "transform 0.5s";
        const double swipeThreshold = 0.8;
        try
        {
            if (mousePoint.Equals(default))
            {
                return;
            }


            var diffX = mousePoint.tupleMouse.Item1 - m.ClientX;
            var diffY = mousePoint.tupleMouse.Item2 - m.ClientY;
            var diffTime = DateTime.Now - mousePoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (velocityX >= swipeThreshold)
            {
                if (diffX < 0)
                { message = "right"; }
                else { message = "left"; }
            }
        }

        catch (Exception e)
        {
            message = e.Message;
        }
    }


}


@code {
    string mvmt;
    string rotation;

    string mvmtReset = "";
    string rotationReset = "";

    private string selectedData = "";
    private bool animeCheck;
    private bool movieCheck;

    private List<string> myAnswers = new List<string>();
    private List<ShowDTO> dataSet; private readonly string baseApiUri = "https://localhost:5021";

    public async Task LoadData(string dataURL, string _selectedData)
    {
        selectedData = _selectedData;
        dataSet = await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/{dataURL}");
    }
    public async Task LoadSelectedData()
    {
        Console.WriteLine("Enter");
        if (animeCheck)
        {
            Console.WriteLine("Anime Check");
            dataSet.AddRange(await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/topanime"));
        }
        if (movieCheck)
        {
            Console.WriteLine("MovieCheck");
            dataSet.AddRange(await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/topmovie"));
        }
    }
    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    string message = "touch to begin";


    void HandleTouchStart(TouchEventArgs t)
    {
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
        cursorGrab = "-webkit-grabbing;";
    }

    void HandleTouchMove(TouchEventArgs t) //A list of TouchPoint for every point of contact currently touching the surface.
    {
        mvmtReset = "";
        double difference = t.TargetTouches[0].ClientX - startPoint.ReferencePoint.ClientX;
        mvmt = difference + "px";
        rotation = (difference / 10) + "deg";
    }


    void HandleTouchEnd(TouchEventArgs t)
    {
        mvmt = "";
        mvmtReset = "transform 0.5s";
        cursorGrab = "";
        const double swipeThreshold = 0.8;
        try
        {
            if (startPoint.ReferencePoint == null)
            {
                return;
            }

            var endReferencePoint = t.ChangedTouches[0];

            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (velocityX >= swipeThreshold)
            {
                if (diffX < 0)
                { message = "right"; }
                else { message = "left"; }
            }
        }

        catch (Exception e)
        {
            message = e.Message;
        }
    }


}



