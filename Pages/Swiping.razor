@page "/swiping"
@using Microsoft.VisualBasic
@using System.Xml.Serialization
@using BlazorAnimate
@inject HttpClient Http



<Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(1.5)" @ref="myAnim" IsManual="false">
    <h1>Swipe away boi</h1>
</Animate>


<p class="alert alert-info">@message</p>
@if (dataSet == null)
{
    <div class="card" style="width: 18rem;" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd" @onkeypress:preventDefault="true">
        <img class="card-img-top" src="https://via.placeholder.com/286x180.png" alt="Card image cap">
        <div class="card-body">
            <h5 class="card-title">title here </h5>
            <p class="card-text">Description here</p>
            @*<a href="#" class="btn btn-primary">Go somewhere</a>*@
        </div>
    </div>

}
else
{
    @foreach (var anime in topAnimes)
    {
        <div class="card" style="width: 18rem;" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd" @onkeypress:preventDefault="true">
            <img class="card-img-top" src="@anime.Image_url" alt="Card image cap">
            <div class="card-body">
                <h5 class="card-title">@anime.Title</h5>
                <p class="card-text">@anime.Description</p>
                @*<a href="#" class="btn btn-primary">Go somewhere</a>*@
            </div>
        </div>
    }
}



@code {
    private Animate myAnim;

    private ShowDTO[] dataSet;
    private ShowDTO[] topAnimes;

    protected override async Task OnInitializedAsync() =>
        dataSet = await Http.GetFromJsonAsync<ShowDTO[]>("https://localhost:5021/topanime");

    private async Task LoadData(string dataURL)
    {
        dataSet = await Http.GetFromJsonAsync<ShowDTO[]>(dataURL); 
        myAnim.Run();

    }




    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    string message = "touch to begin";

    void HandleTouchStart(TouchEventArgs t)
    {
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
    }

    void HandleTouchEnd(TouchEventArgs t)
    {
        const double swipeThreshold = 0.8;
        try
        {
            if (startPoint.ReferencePoint == null)
            {
                return;
            }

            var endReferencePoint = t.ChangedTouches[0];

            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);


            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (velocityX >= swipeThreshold)
            {
                message = diffX < 0 ? "right" : "left";
            }
            if (velocityY >= swipeThreshold)
            {
                message = diffY < 0 ? "down" : "up";
            }
        }

        catch (Exception e)
        {
            message = e.Message;
        }
    }
}
