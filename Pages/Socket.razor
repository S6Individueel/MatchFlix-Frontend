@page "/socket"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject HttpClient client
@using System.Text.Json

<h1> @hubConnection.State</h1>
<div class="form-group">
    <label>
        User:
        <input @bind="dynamicUserId" />
        Current: @dynamicUserId
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="message" size="50" />
    </label>
    <label>
        Group:
        <input @bind="dynamicGroup" size="50" />
        Current: @dynamicGroup
    </label>
</div>

<button @onclick="Send">Send</button>
<button @onclick="SendToGroup">SendToGroup</button>
<button @onclick="AddToGroup">AddToGroup</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.body</li>
    }
    @foreach (var quote in quotes)
    {
        <li>@quote.author</li>
        <li>@quote.body</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<Quote> messages = new List<Quote>();
    private List<Quote> quotes = new List<Quote>();
    private string message = "";
    private string dynamicGroup = "";
    private string dynamicUserId = "";

    private static readonly string baseURI = "https://matchingtest.azurewebsites.net/api";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{baseURI}"))
            .Build();

        hubConnection.On<Quote>("incomingQuote", (IncomingQuote) =>
        {
            quotes.Add(IncomingQuote);
            StateHasChanged();
        });

        hubConnection.On<Quote>("incomingQuote", (IncomingQuote) =>
        {
            quotes.Add(IncomingQuote);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    public async Task Send() =>
        await hubConnection.SendAsync("SendMessageToGroup", message, dynamicGroup);
    //await client.GetFromJsonAsync<string>($"{baseURI}/SendQuote");

    public async Task SendToGroup() =>
    //await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/send", "{'message': '" + message + "'}");
    await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/send", JsonSerializer.Serialize(message));

    public async Task AddToGroup()
    {
        hubConnection.On<Quote>(dynamicGroup, (message) =>
        {
            messages.Add(message);//Replace later with a message model
        StateHasChanged();
        });

        await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/add/{dynamicUserId}", dynamicGroup);
    }


    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    public class Quote
    {
        public string author { get; set; }
        public string body { get; set; }
    }
}