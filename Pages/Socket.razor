@page "/socket"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject HttpClient client
@using System.Text.Json

<h1> @hubConnection.State</h1>
<div class="form-group">
    <label>
        User:
        <input @bind="dynamicUserId" />
        Current: @dynamicUserId
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="message" size="50" />
    </label>
    <label>
        Group:
        <input @bind="dynamicGroup" size="50" />
        Current: @dynamicGroup
    </label>
</div>


<button @onclick="SendToGroup">Send Chat</button>
<button @onclick="AddToGroup">Join Group</button>
<button @onclick="HostGroup">Host Group</button>
<button @onclick="ToggleChat">@toggleText Chat</button>

<hr>
<h2>Compared list:</h2>
<h3>AllAnswers: @allAnswers.Count</h3>
<h3>ComparedList: @comparedList.Count</h3>
@foreach (var answer in comparedList) //Should have access to dataSet in order to show the completed list.
{
    <li>@answer.ToString()</li>
}
@if (isChat)
{
    <h1>Chat</h1>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message.body</li>
        }
        @foreach (var quote in quotes)
        {
            <li>@quote.author</li>
            <li>@quote.body</li>
        }
    </ul>
}


@code {
    private HubConnection hubConnection;
    private List<Quote> messages = new List<Quote>();
    private List<MatchList> matches = new List<MatchList>();
    private List<Quote> quotes = new List<Quote>();

    //private static readonly string baseURI = "https://matchingtest.azurewebsites.net/api";
    private static readonly string baseURI = "http://localhost:7071/api";
    private string message = "";
    private string dynamicGroup = "";
    private string dynamicUserId = "";

    private bool isChat = true;
    private string toggleText = "Hide";

    private List<string> allAnswers = new List<string>();
    private List<string> comparedList = new List<string>();
    private List<string> myAnswers = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{baseURI}"), options =>
            {
                options.Headers.Add("x-ms-signalr-userid", $"{dynamicUserId}");
            })
            .Build();
    }

    private void ToggleChat()
    {
        isChat = isChat ? false : true;
        toggleText = isChat ? "Hide" : "Show";
    }

    public async Task SendToGroup() =>
    await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/send", JsonSerializer.Serialize(message));

    public async Task SendAnswers(List<string> answers) =>
    await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/send/answers", JsonSerializer.Serialize(answers));

    public async Task HostGroup()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"{baseURI}"), options =>
        {
            options.Headers.Add("x-ms-signalr-userid", $"{dynamicUserId}");
        })
        .Build();
        hubConnection.On<string>("incomingHost", (incomingHost) =>
        {
            hubConnection.On<Quote>(incomingHost, (message) => //PROBLEM = ENTRIES GET ADDED AS 1 NOT PER ANSWER, SHOULD DESERIALIZE THE STRING
            {
                messages.Add(message);//TODO: Replace later with a message model
                StateHasChanged();
            });
            dynamicGroup = incomingHost;
            StateHasChanged();
        });
        hubConnection.On<MatchList>("incomingList", (incomingList) => //PROBLEM = ENTRIES GET ADDED AS 1 NOT PER ANSWER, SHOULD DESERIALIZE THE STRING
        {
            matches.Add(incomingList);//TODO: Replace later with a message model
            ParseAnswer(incomingList.MatchResults);
            if (allAnswers.Count == 20) //Replace with (amount * connected users in group) for user support
            {
                CalculateResults();
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await client.GetAsync($"{baseURI}/host/{dynamicUserId}");

    }

    public async Task AddToGroup()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"{baseURI}"), options =>
        {
            options.Headers.Add("x-ms-signalr-userid", $"{dynamicUserId}");
        })
        .Build();
        hubConnection.On<Quote>("incomingQuote", (IncomingQuote) =>
        {
            quotes.Add(IncomingQuote);
            StateHasChanged();
        });
        hubConnection.On<MatchList>("incomingList", (incomingList) => //PROBLEM = ENTRIES GET ADDED AS 1 NOT PER ANSWER, SHOULD DESERIALIZE THE STRING
        {
            matches.Add(incomingList);//TODO: Replace later with a message model
            ParseAnswer(incomingList.MatchResults);
            if (allAnswers.Count == 20) //Replace with (amount * connected users in group) for user support
            {
                CalculateResults();
            }
            StateHasChanged();
        });
        hubConnection.On<Quote>(dynamicGroup, (message) => //PROBLEM = ENTRIES GET ADDED AS 1 NOT PER ANSWER, SHOULD DESERIALIZE THE STRING
        {
            messages.Add(message);//TODO: Replace later with a message model
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/add/{dynamicUserId}", dynamicGroup);
    }
    public void ParseAnswer(string messageBody) //Parse
    {
        List<string> answers = JsonSerializer.Deserialize<List<string>>(messageBody);
        foreach (var item in answers)
        {
            allAnswers.Add(item);
        }
    }

    public void CalculateResults()
    {
        for (int answerCount = 0; answerCount < (20 / 2); answerCount++) //Replace with (amount * connected users in group) for user support
        {
            int halfpoint = 20 / 2;
            //TODO: Use a dictionary with K/V = UserName/List<string>myAnswers
            CompareTwoAnswers(allAnswers[answerCount], allAnswers[halfpoint + answerCount]);
        }
    }

    public void CompareTwoAnswers(string userOne, string userTwo)
    {
        if (userOne == "yes" && userTwo == "yes")
        {
            comparedList.Add("yes");
        }
        else { comparedList.Add("no"); }
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    public class Quote
    {
        public string author { get; set; }
        public string body { get; set; }
    }
}