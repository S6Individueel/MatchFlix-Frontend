@page "/socket"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject HttpClient client
@using System.Text.Json

<h1> @hubConnection.State</h1>
<div class="swipingPage">

    <div class="settings">
        <div class="inputGroup">
            <Input Size="@InputSize.Large" Placeholder="Username" @bind-Value="@dynamicUserId"><Prefix><Icon Type="user" /></Prefix></Input>
            <Input Size="@InputSize.Large" Placeholder="Room pin" @bind-Value="@dynamicGroup"><Prefix><Icon Type="usergroup-add" /></Prefix></Input>
        </div>
        <div class="buttonGroup">

            <Button @onclick="JoinGroup" Type="primary">Join Group</Button>
            <Button @onclick="HostGroup" Type="primary">Host Group</Button>
            <Button @onclick="ToggleChat" Type="primary">@toggleText Chat</Button>

            <Button Type="primary">Start</Button>
        </div>
    </div>

    @if (isChat)
    {
        <div class="chatComponent">
            <div class="chatView">
                <div class="chatMessageContainer">
                    <div class="userList">
                        <DropdownButton Icon="user">
                            <Overlay>
                                @_overlayMenu
                            </Overlay>
                            <ChildContent>
                                @allUsers.Count @((@allUsers.Count == 1) ? "User" : "Users")
                            </ChildContent>
                        </DropdownButton>
                    </div>
                    <ul id="messagesList">
                        @foreach (var message in messages)
                        {
                            <li>@message.UserName: @message.Content</li>
                        }
                    </ul>
                </div>
            </div>
            <div class="sendMessageBar">
                <Search Placeholder="Type a message" OnSearch="SendToGroup" EnterButton="@(" Send")" @bind-Value="@message" /> @*<Icon Type="send" Theme="outline"/>*@
            </div>
        </div>
    }


    @if (!isDone)
    {
@*        <div>
            <Steps Percent="60" Current="1">
                <Step Title="Finished" Description="This is a description." />
                <Step Title="In Progress" Description="This is a description." />
                <Step Title="Waiting" Description="This is a description." />
            </Steps>
        </div>*@
    }
    else
    {
        @foreach (var answer in comparedList)
        {
            <li>@answer.ToString()</li>
        }
    }



    @if (endList == null)
    {
        <Spin />
    }
    else
    {
        @foreach (ShowDTO endShow in endList)
        {
            <div class="card" style="width: 18rem; margin: 2em">
                <img class="card-img-top" src="@endShow.Image_url" alt="Card image cap">

                <div class="card-body">
                    <h5 class="card-title">@endShow.Title</h5>
                    <p class="card-text">@endShow.Description</p>
                </div>
                <p style="color:black">Yes Votes: @endShow.Yes_Count</p>
                <p style="color:black">No Votes: @endShow.No_Count</p>
            </div>
        }
    }

</div>


@code {
    [Parameter]
    public IReadOnlyList<ShowDTO> ShowList { get; set; }

    private HubConnection hubConnection;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private List<MatchList> matches = new List<MatchList>();

    //private static readonly string baseURI = "https://matchingtest.azurewebsites.net/api";
    private static readonly string baseURI = "http://localhost:7071/api";
    private string message = "";
    private string dynamicGroup = "";
    private string dynamicUserId = "";

    private bool isDone = false;
    private bool isChat = true;
    private string toggleText = "Hide";

    private List<string> allAnswers = new List<string>();
    private List<string> comparedList = new List<string>();
    private List<string> myAnswers = new List<string>();
    private List<string> allUsers = new List<string>();

    private List<ShowDTO> endList = new List<ShowDTO>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{baseURI}"))
            .Build();
    }

    private void ToggleChat()
    {
        isChat = isChat ? false : true;
        toggleText = isChat ? "Hide" : "Show";
    }


    public async Task SendToGroup() =>
    await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/{dynamicUserId}/send", JsonSerializer.Serialize(message));

    public async Task SendAnswers(List<string> answers) =>
    await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/send/answers", JsonSerializer.Serialize(answers));

    public async Task HostGroup()
    {
        await ListenerBuilder(true, false, true, true);
        await client.GetAsync($"{baseURI}/host/{dynamicUserId}");
    }

    public async Task JoinGroup()
    {
        await ListenerBuilder(false, true, true, true);
        await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/add/{dynamicUserId}", dynamicGroup);
        await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/updatehost", dynamicUserId);
    }

    //TODO: Host should send a message containing the list of shows that will be swiped to every user when start button is clicked.
    public async Task ListenerBuilder(bool host, bool chat, bool answers, bool usersInfo)
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"{baseURI}"), options =>
        {
            options.Headers.Add("x-ms-signalr-userid", $"{dynamicUserId}");
        })
        .Build();
        if (host) //Host has some special configurations regarding listeners since the host is the first one to join a room.
        {
            chat = false; //Makes sure to disable extra chat listener if forgotten in config.
            usersInfo = false;
            allUsers.Add(dynamicUserId);
            hubConnection.On<string>("incomingHost", (incomingHost) =>
            {
                dynamicGroup = incomingHost;
                hubConnection.On<ChatMessage>("incomingUserUpdate", async (message) =>
                {
                    messages.Add(message); //Make it special list message or somethgin color idk
                allUsers.Add(message.UserName);
                    message.UsersList = allUsers;
                    StateHasChanged();
                    await client.PostAsJsonAsync<string>($"{baseURI}/{dynamicGroup}/updategroup", JsonSerializer.Serialize(message));
                });
                hubConnection.On<ChatMessage>(incomingHost, (message) =>
                {
                    messages.Add(message);
                    StateHasChanged();
                });

                StateHasChanged();
            });
        }
        if (chat)
        {
            hubConnection.On<ChatMessage>(dynamicGroup, (message) =>
            {
                messages.Add(message);
                StateHasChanged();
            });
        }
        if (answers)
        {
            hubConnection.On<MatchList>("incomingList", (incomingList) =>
            {
                matches.Add(incomingList);
                ParseAnswer(incomingList.MatchResults);
                if (allAnswers.Count == ShowList.Count * allUsers.Count)
                {
                    CalculateResults();
                }
                StateHasChanged();
            });
        }
        if (usersInfo)
        {
            hubConnection.On<ChatMessage>("incomingUser", (message) =>
            {
                messages.Add(message); //Takes latest user and funny entrance, Make it special list message or somethgin color idk

            allUsers = message.UsersList; //latest user from server.
            StateHasChanged();
            });
        }
        await hubConnection.StartAsync();
    }

    public void ParseAnswer(string messageBody)
    {
        List<string> answers = JsonSerializer.Deserialize<List<string>>(messageBody);
        foreach (var item in answers)
        {
            allAnswers.Add(item);
        }
    }

    private void ShowResults() //For displaying the results in cards.
    {
        for (int answerCount = 0; answerCount < comparedList.Count; answerCount++)
        {
            if (comparedList[answerCount] == "yes")
            {
                endList.Add(ShowList[answerCount]);
            }
        }
        isDone = true;
    }

    public void CalculateResults()
    {

        for (int answerCount = 0; answerCount < ShowList.Count; answerCount++)
        {
            for (int NxtUsrIndex = 0; NxtUsrIndex < allAnswers.Count; NxtUsrIndex += ShowList.Count) //For every user
            {
                if (allAnswers[answerCount + NxtUsrIndex] == "yes")
                {
                    ShowList[answerCount].Yes_Count++;
                }
                else
                {
                    ShowList[answerCount].No_Count++;
                }
            }
            endList.Add(ShowList[answerCount]);
        }
        isDone = true;
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    //Current users dropdown menu
    private RenderFragment _overlayMenu =>@<Menu>
        @foreach (var user in allUsers)
        {
            <MenuItem><a style="color:#6D5AB3;">@user.ToString()</a></MenuItem>
        }
    </Menu>;

    private RenderFragment ButtonsRender(RenderFragment leftButton, RenderFragment rightButton)
     {
         return @<Template>
    <span>@leftButton</span>
    @rightButton 
</Template>;
}
}