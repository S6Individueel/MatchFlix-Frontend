@*@page "/test"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject NavigationManager uriHelper
@inject HttpClient client
@using System.Text.Json
@inject MessageService _message

<div class="swipingContentPage">
            <div class="swipe-icons" style="font-size: @iconSize">
                @if (isRight)
                {
                <div style="opacity: @(iconOpacity); transition:@(iconOpacityReset)"><Icon Type="heart" Theme="fill" Id="swipe-icon-heart" /></div>
                }else
                { 
                <div style="opacity: @(iconOpacity * -1); transition:@(iconOpacityReset)"><Icon Type="close" Theme="outline" Id="swipe-icon-close" /></div>            
                }
            </div>

        <div class="isSwiping" @onmouseup="HandleMouseUp" @ontouchstart=HandleTouchStart @onkeypress:preventDefault=true @ontouchmove="HandleTouchMove"
             @ontouchend=HandleTouchEnd @onmousedown=HandleMouseDown @onmousemove=HandleMouseMove style="overflow:hidden;">
            
            
            <div class="card-choice-icon" style="display:flex;justify-content:center;">
                
                <div class="card" style="width: 18rem; margin: 2em; transform: translateX(@mvmt) rotate(@rotation);transition: @mvmtReset; cursor: @cursorGrab;">

                    <img class="card-img-top" src="https://via.placeholder.com/350x150" alt="Card image cap">


                    <div class="card-body">
                        <h5 class="card-title">Placeholder title</h5>
                        <p class="card-text">Placeholder description</p>

                    </div>
                </div>

            </div>
        </div>
        <div class="swipe-controls">
            <div class="swipe-buttons">
                <Button Type="primary" Shape="circle" Icon="close" Size="large" @onclick="() => ChooseLeft(dataSet[0].Id)"/>
            </div>
            <div class="swipe-buttons">
                <Button Type="primary" Shape="circle" Icon="heart" Size="large" @onclick="() => ChooseRight(dataSet[0].Id)"/>
            </div>
        </div>
</div>

    @code {
        #region Swiping
        private List<ShowDTO> dataSet;
        private List<ShowDTO> swipedSet = new List<ShowDTO>();
        private int dataCount = 0;
        private readonly string baseApiUri = "https://localhost:5021";
        private string selectedData = "";

        string mvmt;
        string rotation;
        double iconOpacity;
        string iconSize;
        string iconOpacityReset= "";
        int opacityNormalizer = 200;

        double difference;
        bool isRight;
        string mvmtReset = "";
        string rotationReset = "";

        private bool animeCheck;
        private bool movieCheck;
        private string cursorGrab;
        ((double, double) tupleMouse, DateTime StartTime) mousePoint;
        bool pressedDown;

        void HandleMouseDown(MouseEventArgs m)
        {
            cursorGrab = "-webkit-grabbing;";
            pressedDown = true;
            (double, double) pos = (m.ClientX, m.ClientY);
            mousePoint.StartTime = DateTime.Now;
            mousePoint.tupleMouse = pos;
        }

        void HandleMouseMove(MouseEventArgs m)
        {
            if (pressedDown == true)
            {
                mvmtReset = "";
                iconOpacityReset = "";
                difference = m.ClientX - mousePoint.tupleMouse.Item1;
                if (difference > 0){ isRight = true; }else{ isRight = false; }
                iconSize = Math.Abs(difference / 50) + "em";
                mvmt = difference + "px";
                rotation = (difference / 10) + "deg";
                iconOpacity = (difference) / opacityNormalizer ;
            }
        }

        void HandleMouseUp(MouseEventArgs m)
        {


            difference = 0;
            pressedDown = false;
            cursorGrab = "";
            mvmt = "";
            iconOpacity = 0;
            mvmtReset = "transform 0.5s";
            iconOpacityReset = "opacity 0.5s ease-in-out";
            const double swipeThreshold = 0.8;
            try
            {
                if (mousePoint.Equals(default))
                {
                    return;
                }


                var diffX = mousePoint.tupleMouse.Item1 - m.ClientX;
                var diffY = mousePoint.tupleMouse.Item2 - m.ClientY;
                var diffTime = DateTime.Now - mousePoint.StartTime;
                var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
                var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

                if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
                if (Math.Abs(velocityX - velocityY) < .5) return;

                if (velocityX >= swipeThreshold)
                {
                    if (diffX < 0)
                    { ChooseRight(dataSet[0].Id); }
                    else { ChooseLeft(dataSet[0].Id); }
                }
            }

            catch (Exception e)
            {
            }
        }
        (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

        string swipingMessage = "touch to begin";

        void HandleTouchStart(TouchEventArgs t)
        {
            startPoint.ReferencePoint = t.TargetTouches[0];
            startPoint.StartTime = DateTime.Now;
            cursorGrab = "-webkit-grabbing;";
        }

        void HandleTouchMove(TouchEventArgs t) //A list of TouchPoint for every point of contact currently touching the surface.
        {
            mvmtReset = "";
            double difference = t.TargetTouches[0].ClientX - startPoint.ReferencePoint.ClientX;
            mvmt = difference + "px";
            rotation = (difference / 10) + "deg";
        }


        void HandleTouchEnd(TouchEventArgs t)
        {
            mvmt = "";
            mvmtReset = "transform 0.5s";
            cursorGrab = "";
            const double swipeThreshold = 0.8;
            try
            {
                if (startPoint.ReferencePoint == null)
                {
                    return;
                }

                var endReferencePoint = t.ChangedTouches[0];

                var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
                var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
                var diffTime = DateTime.Now - startPoint.StartTime;
                var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
                var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

                if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
                if (Math.Abs(velocityX - velocityY) < .5) return;

                if (velocityX >= swipeThreshold)
                {
                    if (diffX < 0)
                    { ChooseRight(dataSet[0].Id); }
                    else { ChooseLeft(dataSet[0].Id); }
                }
            }

            catch (Exception e)
            {
            }
        }

        void SearchAndAdd(int id, string answer)
        {
            foreach (ShowDTO show in dataSet)
            {
                if (show.Id == id)
                {
                    swipedSet.Add(show);
                    dataSet.Remove(show);
                    return;
                }
            }
        }

        void ChooseLeft(int id)
        {
            SearchAndAdd(id, "no");
        }

        void ChooseRight(int id)
        {
            SearchAndAdd(id, "yes");
        }


        public async Task LoadData(string dataURL, string _selectedData)
        {
            selectedData = _selectedData;
            dataCount = dataSet.Count;
        }

        #endregion
    }

*@