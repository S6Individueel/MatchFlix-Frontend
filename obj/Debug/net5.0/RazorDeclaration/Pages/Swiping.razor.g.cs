// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MatchFlix_Frontend.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MatchFlix_Frontend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MatchFlix_Frontend.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MatchFlix_Frontend.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Swiping.razor"
using Microsoft.VisualBasic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Swiping.razor"
using System.Xml.Serialization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Swiping.razor"
using BlazorAnimate;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Swiping.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/uxswipe")]
    public partial class Swiping : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 49 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Swiping.razor"
      
    private string cursorGrab;

    ((double, double) tupleMouse, DateTime StartTime) mousePoint;
    bool pressedDown;
    void HandleMouseDown(MouseEventArgs m)
    {
        cursorGrab = "-webkit-grabbing;";
        pressedDown = true;
        (double, double) pos = (m.ClientX, m.ClientY);
        mousePoint.StartTime = DateTime.Now;
        mousePoint.tupleMouse = pos;
    }

    void HandleMouseMove(MouseEventArgs m)
    {
        if (pressedDown == true)
        {
            mvmtReset = "";
            double difference = m.ClientX - mousePoint.tupleMouse.Item1;
            mvmt = difference + "px";
            rotation = (difference / 10) + "deg";
        }
    }

    void HandleMouseUp(MouseEventArgs m)
    {
        pressedDown = false;
        cursorGrab = "";
        mvmt = "";
        mvmtReset = "transform 0.5s";
        const double swipeThreshold = 0.8;
        try
        {
            if (mousePoint.Equals(default))
            {
                return;
            }


            var diffX = mousePoint.tupleMouse.Item1 - m.ClientX;
            var diffY = mousePoint.tupleMouse.Item2 - m.ClientY;
            var diffTime = DateTime.Now - mousePoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (velocityX >= swipeThreshold)
            {
                if (diffX < 0)
                { message = "right"; }
                else { message = "left"; }
            }
        }

        catch (Exception e)
        {
            message = e.Message;
        }
    }



#line default
#line hidden
#nullable disable
#nullable restore
#line 116 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Swiping.razor"
       
    string mvmt;
    string rotation;

    string mvmtReset = "";
    string rotationReset = "";

    private string selectedData = "";
    private bool animeCheck;
    private bool movieCheck;

    private List<string> myAnswers = new List<string>();
    private List<ShowDTO> dataSet; private readonly string baseApiUri = "https://localhost:5021";

    public async Task LoadData(string dataURL, string _selectedData)
    {
        selectedData = _selectedData;
        dataSet = await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/{dataURL}");
    }
    public async Task LoadSelectedData()
    {
        Console.WriteLine("Enter");
        if (animeCheck)
        {
            Console.WriteLine("Anime Check");
            dataSet.AddRange(await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/topanime"));
        }
        if (movieCheck)
        {
            Console.WriteLine("MovieCheck");
            dataSet.AddRange(await Http.GetFromJsonAsync<List<ShowDTO>>($"{baseApiUri}/topmovie"));
        }
    }
    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    string message = "touch to begin";


    void HandleTouchStart(TouchEventArgs t)
    {
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
        cursorGrab = "-webkit-grabbing;";
    }

    void HandleTouchMove(TouchEventArgs t) //A list of TouchPoint for every point of contact currently touching the surface.
    {
        mvmtReset = "";
        double difference = t.TargetTouches[0].ClientX - startPoint.ReferencePoint.ClientX;
        mvmt = difference + "px";
        rotation = (difference / 10) + "deg";
    }


    void HandleTouchEnd(TouchEventArgs t)
    {
        mvmt = "";
        mvmtReset = "transform 0.5s";
        cursorGrab = "";
        const double swipeThreshold = 0.8;
        try
        {
            if (startPoint.ReferencePoint == null)
            {
                return;
            }

            var endReferencePoint = t.ChangedTouches[0];

            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (velocityX >= swipeThreshold)
            {
                if (diffX < 0)
                { message = "right"; }
                else { message = "left"; }
            }
        }

        catch (Exception e)
        {
            message = e.Message;
        }
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
