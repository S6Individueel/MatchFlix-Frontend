// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MatchFlix_Frontend.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MatchFlix_Frontend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MatchFlix_Frontend.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using BlazorAnimate;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MatchFlix_Frontend.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MongoDB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\_Imports.razor"
using MongoDB.Driver.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Test.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Test.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/test")]
    public partial class Test : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 50 "C:\Users\ander\Desktop\frontend\MatchFlix-Frontend\Pages\Test.razor"
           
        #region Swiping
        private List<ShowDTO> dataSet;
        private List<ShowDTO> swipedSet = new List<ShowDTO>();
        private int dataCount = 0;
        private readonly string baseApiUri = "https://localhost:5021";
        private string selectedData = "";

        string mvmt;
        string rotation;
        double iconOpacity;
        string iconSize;
        string iconOpacityReset= "";
        int opacityNormalizer = 200;

        double difference;
        bool isRight;
        string mvmtReset = "";
        string rotationReset = "";

        private bool animeCheck;
        private bool movieCheck;
        private string cursorGrab;
        ((double, double) tupleMouse, DateTime StartTime) mousePoint;
        bool pressedDown;

        void HandleMouseDown(MouseEventArgs m)
        {
            cursorGrab = "-webkit-grabbing;";
            pressedDown = true;
            (double, double) pos = (m.ClientX, m.ClientY);
            mousePoint.StartTime = DateTime.Now;
            mousePoint.tupleMouse = pos;
        }

        void HandleMouseMove(MouseEventArgs m)
        {
            if (pressedDown == true)
            {
                mvmtReset = "";
                iconOpacityReset = "";
                difference = m.ClientX - mousePoint.tupleMouse.Item1;
                if (difference > 0){ isRight = true; }else{ isRight = false; }
                iconSize = Math.Abs(difference / 50) + "em";
                mvmt = difference + "px";
                rotation = (difference / 10) + "deg";
                iconOpacity = (difference) / opacityNormalizer ;
            }
        }

        void HandleMouseUp(MouseEventArgs m)
        {


            difference = 0;
            pressedDown = false;
            cursorGrab = "";
            mvmt = "";
            iconOpacity = 0;
            mvmtReset = "transform 0.5s";
            iconOpacityReset = "opacity 0.5s ease-in-out";
            const double swipeThreshold = 0.8;
            try
            {
                if (mousePoint.Equals(default))
                {
                    return;
                }


                var diffX = mousePoint.tupleMouse.Item1 - m.ClientX;
                var diffY = mousePoint.tupleMouse.Item2 - m.ClientY;
                var diffTime = DateTime.Now - mousePoint.StartTime;
                var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
                var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

                if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
                if (Math.Abs(velocityX - velocityY) < .5) return;

                if (velocityX >= swipeThreshold)
                {
                    if (diffX < 0)
                    { ChooseRight(dataSet[0].Id); }
                    else { ChooseLeft(dataSet[0].Id); }
                }
            }

            catch (Exception e)
            {
            }
        }
        (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

        string swipingMessage = "touch to begin";

        void HandleTouchStart(TouchEventArgs t)
        {
            startPoint.ReferencePoint = t.TargetTouches[0];
            startPoint.StartTime = DateTime.Now;
            cursorGrab = "-webkit-grabbing;";
        }

        void HandleTouchMove(TouchEventArgs t) //A list of TouchPoint for every point of contact currently touching the surface.
        {
            mvmtReset = "";
            double difference = t.TargetTouches[0].ClientX - startPoint.ReferencePoint.ClientX;
            mvmt = difference + "px";
            rotation = (difference / 10) + "deg";
        }


        void HandleTouchEnd(TouchEventArgs t)
        {
            mvmt = "";
            mvmtReset = "transform 0.5s";
            cursorGrab = "";
            const double swipeThreshold = 0.8;
            try
            {
                if (startPoint.ReferencePoint == null)
                {
                    return;
                }

                var endReferencePoint = t.ChangedTouches[0];

                var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
                var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
                var diffTime = DateTime.Now - startPoint.StartTime;
                var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
                var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

                if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
                if (Math.Abs(velocityX - velocityY) < .5) return;

                if (velocityX >= swipeThreshold)
                {
                    if (diffX < 0)
                    { ChooseRight(dataSet[0].Id); }
                    else { ChooseLeft(dataSet[0].Id); }
                }
            }

            catch (Exception e)
            {
            }
        }

        void SearchAndAdd(int id, string answer)
        {
            foreach (ShowDTO show in dataSet)
            {
                if (show.Id == id)
                {
                    swipedSet.Add(show);
                    dataSet.Remove(show);
                    return;
                }
            }
        }

        void ChooseLeft(int id)
        {
            SearchAndAdd(id, "no");
        }

        void ChooseRight(int id)
        {
            SearchAndAdd(id, "yes");
        }


        public async Task LoadData(string dataURL, string _selectedData)
        {
            selectedData = _selectedData;
            dataCount = dataSet.Count;
        }

        #endregion
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MessageService _message { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient client { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
